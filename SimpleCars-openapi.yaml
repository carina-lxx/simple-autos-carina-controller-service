openapi: 3.0.1
info:
  title: Simple Autos
servers:
  - url: https://localhost:8080
  - url: http://localhost:8080
tags:
  - name: Simple Automobiles
    externalDocs:
      description: Find out more
      url: https://gitlab.com/carina-lxx/echo-cars
paths:
  /api/autos:
    get:
      tags:
        - autos
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - available
                - pending
                - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/automobile'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/automobile'
        400:
          description: Invalid status value
          content: {}
    post:
      tags:
        - autos
      summary: Create new
      requestBody:
        description: Autos object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/automobile'
        required: true
      responses:
        '200':
          description: OK
  /api/autos/{vin}:
    get:
      tags:
        - autos
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - available
                - pending
                - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/automobile'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/automobile'
        400:
          description: Invalid status value
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    patch:
      tags:
        - autos
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/automobile'
            application/json:
              schema:
                $ref: '#/components/schemas/automobile'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
      security:
        - api_key: []
    delete:
      tags:
        - autos
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: vin
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets

components:
  schemas:
    automobile:
      type: object
      properties:
        year:
          type: integer
          example: 1967
        make:
          type: string
        model:
          type: string
        color:
          type: string
        owner:
          type: string
        vin:
          type: string
    autos-list:
      description:
          list of automobiles
      type: array
      properties:
        automobiles:
          type: array
    update-auto:
      type: object
      properties:
        color:
          type: string
        owner:
          type: string
    error-message:
      type: object
      properties:
        id:
          type: integer
          format: int64